substitutions:
  colorline: color_line
  colorline1: color_line1
  ch2n: 电压
  ch2u: V
  ch2id: bl0942_v

  ch1n: 频率
  ch1u: Hz
  ch1id: bl0942_f

  ch3n: 电流
  ch3u: A
  ch3id: bl0942_c

  ch5n: 能量
  ch5u: kWh 
  ch5id: bl0942_e

  ch4n: 功率
  ch4u: W
  ch4id: bl0942_p

esphome:
  name: "esp32c3usb1-8-pm-socket"
  friendly_name: esp32c3usb1-8 power metering socket
  platformio_options:
#    board_upload.flash_size: 8MB
#    board_upload.maximum_size: 8388608
    board_build.flash_mode: dio

  on_boot:
    - then:
      - light.turn_on:
          id: light_1
          brightness: 75%

      - rtttl.play: 'one short:d=4,o=5,b=250:32c4'          
      priority: -100.0

esp32:
  board: airm2m_core_esp32c3
  framework:
    type: arduino

# Enable logging
logger:
#  level: ERROR
# Enable Home Assistant API
api:
  encryption:
    key: "f7wtecb1YlxOOks9q0deDjsneCpTyAWPnIaT0pbmvY4="

  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:        
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
ota:
  - platform: esphome
    password: "6866e86e2190928c6b0eae40c354e322"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp32C3Usb1-8-Ib-Timer"
    password: "12345678"
    
network:
  enable_ipv6: true
  min_ipv6_addr_count: 2

captive_portal:

rtttl:
  output: rtttl_out
  id: rtttlplay
  on_finished_playback:
    - logger.log: 'Song ended!'
    


output:
  - platform: ledc
    pin: 5
    id: blcpin

  - platform: ledc
    pin: 4
    id: ledpin

  - platform: ledc
    pin: 
      number: 13
      ignore_pin_validation_error: true
#    inverted: True
    id: rtttl_out

spi:
  clk_pin: GPIO2
  mosi_pin: GPIO3
#  miso_pin: GPIO
  id: spi_bus1
  interface: hardware

uart:
  tx_pin: 21
  rx_pin: 20
  baud_rate: 4800
  id: uart_1

interval:
  - interval: 10s
    then:
      - switch.turn_on: ntc_vcc
      - component.update: source_sensor
      - switch.turn_off: ntc_vcc


binary_sensor:
#######K4##########
  - platform: gpio
    pin:
      number: 9
      mode:
        input: true
        pullup: true
      inverted: true
    name: "key4"
    id: k4
    internal: true    
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
#      - then:
      - if:
          condition:
            display_menu.is_active: my_graphical_display_menu
          then:
            - display_menu.left: my_graphical_display_menu
          else:
#            - display.page.show_previous: st7789vd
            - display.page.show: page1
#            - light.toggle: light_led
 #       - switch.turn_on: sw_13
 #     - light.turn_on:
 #         id: light_led

    on_release:
      - then:
#        - switch.turn_off: sw_13  

#######K3##########
  - platform: gpio
    pin:
      number: 8
      mode:
        input: true
        pullup: true
      inverted: true
    name: "key3"
    id: k3
    internal: true    
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
#      - then:
      - if:
          condition:
            display_menu.is_active: my_graphical_display_menu
          then:
            - display_menu.right: my_graphical_display_menu
          else:
            - display.page.show_next: st7789vd
#            - display.page.show: page2
#    on_release:
 #     - then:
#        - switch.turn_off: sw_13  

#######K2##########
  - platform: gpio
    pin:
      number: 19
      mode:
        input: true
        pullup: true
      inverted: true
#      allow_other_uses: true
    name: "key2"
    id: k2
    internal: true    
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      - if:
          condition:
            display_menu.is_active: my_graphical_display_menu
          then:
            - display_menu.enter: my_graphical_display_menu
          else:
#            - display_menu.show:  my_graphical_display_menu
            - display_menu.show_main: my_graphical_display_menu
 #       - switch.turn_on: sw_13
 #   on_release:
 #     - then:
#        - switch.turn_off: sw_13  

#######K1##########  
  - platform: gpio
    pin:
      number: 18
      mode:
        input: true
        pullup: true
      inverted: true
#      allow_other_uses: true
    name: "key1"
    id: k1
    internal: true    
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
#      - then:
      - if:
          condition:
            display_menu.is_active: my_graphical_display_menu
          then:
            - display_menu.down: my_graphical_display_menu
          else:
            - display.page.show: page1
            - switch.toggle: relay_sw



#        - switch.toggle: relay_sw
#        - light.toggle: light_led
#        - id(light_led).turn_on().set_brightness(0.55)
#        - delay: 200ms
            
#      - then:      
#        - lambda: |-
#            if(id(relay_sw).state)
#            {
 #           //  id: light_led
#            id(light_led).turn_on().set_brightness(0.55).perform();
#            //  id(light_led).set.brightness = 0.55 ;


 #           }else
#            {
#              id(light_led).turn_off() ;
 #             //id(light_led).turn_on().set_brightness(0).perform();
#              }
  
 #   on_release:
 #     - then:
#        - switch.turn_off: sw_13

graphical_display_menu:
  id: my_graphical_display_menu
  display: st7789vd
  font: font2
  on_redraw:
    then:
      component.update: st7789vd
  active: false
  mode: joystick #rotary
  foreground_color: my_white
  background_color: my_yellow

  items:
    - type: command
      text: 'Hide'
      id: item1
      on_value:
        then:
          - display_menu.hide: my_graphical_display_menu

#    - type: back
#      text: 'back' 

    - type: switch
      immediate_edit: true     
      text: 'relay-sw'
      on_text: 'ON'
      off_text: 'OFF'
      switch: relay_sw
      on_value:
        then:
          lambda: 'ESP_LOGI("display_menu", "switch value: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'

#    - type: Label
#      text: 'Menu Item 2'


    - type: number
      text: '设定电流'
      format: '%.1f'
      immediate_edit: true
      number: current_num
      on_enter:
        then:
          lambda: 'ESP_LOGI("display_menu", "number enter: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
      on_leave:
        then:
          lambda: 'ESP_LOGI("display_menu", "number leave: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
      on_value:
        then:
          lambda: 'ESP_LOGI("display_menu", "number value: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'

    - type: number
      text: '设定功率'
      format: '%.0f'
      immediate_edit: true
      number: power_num
      on_enter:
        then:
          lambda: 'ESP_LOGI("display_menu", "number enter: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
      on_leave:
        then:
          lambda: 'ESP_LOGI("display_menu", "number leave: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'
      on_value:
        then:
          lambda: 'ESP_LOGI("display_menu", "number value: %s, %s", it->get_text().c_str(), it->get_value_text().c_str());'



    - type: command
      text: 'Hide'
      on_value:
        then:
          - display_menu.hide: my_graphical_display_menu


number:
  - platform: template
    id: current_num
    name: 'current set'
    optimistic: true
    restore_value: true
    min_value: 0.0
    max_value: 20.0
    step: 0.5
    on_value:
      then:
        lambda: 'ESP_LOGI("number", "value: %f", x);'

  - platform: template
    id: power_num
    name: 'power set'
    optimistic: true
    restore_value: true
    min_value: 0.0
    max_value: 2200.0
    step: 10
    on_value:
      then:
        lambda: 'ESP_LOGI("number", "value: %f", x);'


display:
  - platform: ili9xxx
    model: ST7789V
    dimensions:
      height: 240
      width: 240
      offset_height: 0
      offset_width: 0
    id: st7789vd
    cs_pin: GPIO7
    dc_pin: GPIO6
    reset_pin: GPIO10
    rotation: 90
    data_rate: 80MHz
    color_order: bgr    
    update_interval: 1s
    show_test_card: false
    invert_colors: true
    auto_clear_enabled: true
#    eightbitcolor: true
#    backlight_pin: GPIO11
    pages:
      - id: page1
        lambda: |-

          //auto red = Color(255, 0, 0);
          //auto green = Color(0, 255, 0);
          //auto blue = Color(0, 0, 255);
          auto orange = Color(255, 99, 71);
          //it.line(0, 0, 240, 0, id(my_chocolate));
          //it.printf(0, 0, id(syht16), id(my_green), TextAlign::TOP_LEFT, "温度: %.1f°C", id(intemp).state);
          // draw a line from [x=0,y=0] to [x=50,y=50]

          // 行  draw a line from [x=0,y=0] to [x=50,y=50]
          it.line(0, 48, 240, 48, id(${colorline}));
          it.line(0, 96, 240, 96, id(${colorline1}));
          it.line(0, 144, 240, 144, id(${colorline}));
          it.line(0, 192, 240, 192, id(${colorline1}));

          //列
          it.line(90, 0, 90, 240, id(${colorline}));
          //it.line(150, 30, 150, 240, id(${colorline}));

          //top
          //it.print(0, 15, id(sszh24), id(my_orange), TextAlign::CENTER_LEFT, "U=");
          //it.printf(0, 15, id(sszh24), id(${ucolor}), TextAlign::CENTER_LEFT, "%.2fV", id(ch1v).state);
          //auto chi = id(ch1c).state + id(ch2c).state + id(ch3c).state;
          //it.printf(75, 15, id(sszh24), id(${icolor}), TextAlign::CENTER_LEFT, "%.2fV", id(ch5v).state);
          //auto chp = id(ch1p).state + id(ch2p).state + id(ch3p).state;
          //it.printf(165, 15, id(sszh24), id(${pcolor}), TextAlign::CENTER_LEFT, "%.2fV", id(bv226).state);

          // ch1
          //it.printf(0, 45, id(sszh24), id(my_orange), TextAlign::CENTER_LEFT, "  %.1fk    %.1fk", id(ch1v).state, id(nasdownload).state);
          it.print(45, 24, id(mczt28), id(ch1_color), TextAlign::CENTER, "${ch1n}");
          it.printf(150, 24, id(sszt28), id(ch1_color), TextAlign::CENTER, "%.2f", id(${ch1id}).state); 
          it.print(240, 36, id(sszh22), id(ch1_color), TextAlign::CENTER_RIGHT, "${ch1u}");                  
          //it.printf(195, 45, id(sszh24), id(ch1_color), TextAlign::CENTER, "%.2fw", id(ch1p).state);

          //ch2
          it.print(45, 72, id(mczt28), id(ch2_color), TextAlign::CENTER, "${ch2n}");
          it.printf(150, 72, id(sszt28), id(ch2_color), TextAlign::CENTER, "%.1f", id(${ch2id}).state);         
          it.print(240, 84, id(sszh22), id(ch2_color), TextAlign::CENTER_RIGHT, "${ch2u}");
          
          //ch3
          it.print(45, 120, id(mczt28), id(ch3_color), TextAlign::CENTER, "${ch3n}");        
          it.printf(150, 120, id(sszt28), id(ch3_color), TextAlign::CENTER, "%.2f", id(${ch3id}).state);         
          it.print(240, 132, id(sszh22), id(ch3_color), TextAlign::CENTER_RIGHT, "${ch3u}");  

          //ch4
          it.print(45, 168, id(mczt28), id(ch4_color), TextAlign::CENTER, "${ch4n}");         
          it.printf(150, 168, id(sszt28), id(ch4_color), TextAlign::CENTER, "%.1f", id(${ch4id}).state);         
          it.print(240, 180, id(sszh22), id(ch4_color), TextAlign::CENTER_RIGHT, "${ch4u}"); 

          //ch5
          it.print(45, 216, id(mczt28), id(ch5_color), TextAlign::CENTER, "${ch5n}");
          it.printf(150, 216, id(sszt28), id(ch5_color), TextAlign::CENTER, "%.2f", id(${ch5id}).state);         
          it.print(240, 228, id(sszh22), id(ch5_color), TextAlign::CENTER_RIGHT, "${ch5u}"); 


      - id: page2
        lambda: |-

          it.print(0, 24, id(mczt30), id(ch3_color), TextAlign::CENTER_LEFT, "实时功率:");
          it.printf(175, 24, id(sszt281), id(ch4_color), TextAlign::CENTER, "%.1f", id(${ch4id}).state);


          it.print(0, 72, id(mczt30), id(ch3_color), TextAlign::CENTER_LEFT, "实时电流:");
          it.printf(175, 72, id(sszt281), id(ch4_color), TextAlign::CENTER, "%.1f", id(${ch3id}).state);

          it.print(0, 120, id(mczt30), id(ch3_color), TextAlign::CENTER_LEFT, "设定功率:");
          it.printf(175, 120, id(sszt281), id(ch4_color), TextAlign::CENTER, "%.0f", id(power_num).state);

          it.print(0, 168, id(mczt30), id(ch3_color), TextAlign::CENTER_LEFT, "设定电流:");
          it.printf(175, 168, id(sszt281), id(ch4_color), TextAlign::CENTER, "%.1f", id(current_num).state);

      - id: page3
        lambda: |-

          it.print(0, 24, id(font1), id(ch3_color), TextAlign::CENTER_LEFT, "V1 2024/10/30");
          it.print(0, 72, id(font2), id(ch3_color), TextAlign::CENTER_LEFT, "电压率HzA123047");
          it.print(0, 120, id(font3), id(ch3_color), TextAlign::CENTER_LEFT, "电压率HzA1234");
          it.print(0, 168, id(font4), id(ch3_color), TextAlign::CENTER_LEFT, "电压流频率HzAW");


font:
# 名称字体
  - file: 'SanJiZhiHeiTi.ttf'
#  - file: 'yahe.ttf'  
    id: mczt28
    size: 33
    glyphs: 设定实时电压流功率频能:量

  - file: 'SanJiZhiHeiTi.ttf'
#  - file: 'yahe.ttf'  
    id: mczt30
    size: 28
    glyphs: 设定实时电压流功率频能:量

# 数值字体
  - file: 'SanJiZhiHeiTi.ttf'
#  - file: 'fanfzhenht.ttf'
#  - file: 'yahe.ttf'
    id: sszt28
    size: 38
    glyphs: 1!"%/()+,=-_.:°023456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz

# 数值字体
  - file: 'SanJiZhiHeiTi.ttf'
#  - file: 'fanfzhenht.ttf'
#  - file: 'yahe.ttf'
    id: sszt281
    size: 32
    glyphs: 1!"-_.:°023456789

# 单位字体
  - file: 'SanJiZhiHeiTi.ttf'
#  - file: 'yahe.ttf'  
    id: sszh22
    size: 20
    glyphs: HzVAWkh()


  - file: 'yahe.ttf'
    id: font1
    size: 28
    glyphs: 1/ V234567890

  - file: 'SanJiZhiHeiTi.ttf'
    id: font2
    size: 27
    glyphs: 设定实时电压流功率频能量1!"%/()+,=-_.:°023456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz

  - file: 'fanfzhenht.ttf'
    id: font3
    size: 28
    glyphs: 电压率HzA1234

  - file: 'hanyi50.ttf'
    id: font4
    size: 28
    glyphs: 电压流频率HzAW

color:
#100%表示关闭  
  - id: my_red
#    hex: FF0000
    hex: 00ffff

  - id: my_yellow
    hex: d57b03
#    hex: FFFF00


  - id: my_green
#    hex: 008000
    hex: 00ff47

  - id: my_darkorange
    hex: 0073ff
#    hex: FF8C00

#  - id: my_black
#    hex: 000000

  - id: my_white
    hex: FFFFFF
 #   hex: 000000

  - id: my_chocolate
#    hex: D2691E
    hex: 2d96e1

  - id: my_orange
    hex: 005aff
#    hex: FFA500    

  - id: my_gold
    hex: 0028ff
#    hex: FFD700

#森林绿
  - id: color_line
#    hex: dd74dd
    hex: 228B22

#巧克力
  - id: color_line1
#    hex: 2d96e1
    hex: D2691E

#gold line
  - id: Crimson
    hex: 0028ff
#    hex: FFD700

# ch1
  - id: ch1_color
#    hex: 63b5f7
    hex: f7da83


#yellow ch2
  - id: ch2_color
    hex: fbe200
#    hex: FFFFFF

# ch3
  - id: ch3_color
#    hex: 000000
    hex: FFFFFF

#yellow ch4
  - id: ch4_color
    hex: faf844
#    hex: FFFFFF

#green ch5
  - id: ch5_color
#    hex: fbace3
    hex: ff8127

light:
  - platform: monochromatic
    output: blcpin
    name: "Backlight"
    id: light_1
    restore_mode: RESTORE_AND_ON

  - platform: monochromatic
    output: ledpin
    name: "light led"
    id: light_led
#    restore_mode: RESTORE_AND_ON
    effects:
 
#      - strobe:
      - strobe:
          name: Strobe Effect With Custom Values
#          id: ef1
          colors:
            - state: true
              brightness: 100%
              duration: 120ms
            - state: false
              duration: 1870ms
      - strobe:
          name: swin
 #         id: ef1
          colors:
            - state: true
              brightness: 100%
              duration: 200ms
            - state: false
              duration: 200ms

#  - platform: status_led
#    name: "System state"
#    pin: 
#      number: 12
#      ignore_pin_validation_error: true    


switch:
  - platform: gpio
    pin: 
      number: 1
      mode:
        output: true
        pulldown: true
#      inverted: False
    name: relay_sw
    id: relay_sw
    restore_mode: ALWAYS_OFF

    on_turn_on:
      - light.turn_on: light_led
      - light.turn_on:
          id: light_led
          brightness: 55% 
    on_turn_off:
      - light.turn_off: light_led



#  - platform: gpio
#    pin: 
#      number: 4
#      mode:
#        output: true
#        pulldown: true
#      inverted: False
#    name: led_sw
#    id: led_sw
#    restore_mode: ALWAYS_OFF

  - platform: gpio
    pin: 
      number: 12
      ignore_pin_validation_error: true
    id: ntc_vcc

sensor:
  - platform: ntc
    sensor: resistance_sensor
    name: "NTC Temperature"
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 100kOhm

  - platform: resistance
    id: resistance_sensor
    sensor: source_sensor
    configuration: DOWNSTREAM
    resistor: 100kOhm

  - platform: adc
    id: source_sensor
    pin: 0
    filters:
      - multiply: 1.92

  - platform: bl0942
    voltage:
      name: 'BL0942 Voltage'
      id: bl0942_v
    current:
      name: 'BL0942 Current'
      id: bl0942_c
      on_value: 
        then:
          lambda: |-          
            if(x > id(current_num).state)
              {
                id(relay_sw).turn_off();
                id(rtttlplay).play("two_short:d=4,o=5,b=100:16e6,16e6");
               // return (song.find('':'') == std::string::npos) ? ("song:d=16,o=5,b=100:" + song).c_str() : song.c_str();
                //song.c_str('two_short:d=4,o=5,b=100:16e6,16e6').rtttl.play ; 
              }

       
    power:
      name: 'BL0942 Power'
      id: bl0942_p
      on_value: 
        then:
          lambda: |-          
            if(x > id(power_num).state)
              {
                id(relay_sw).turn_off();
                id(rtttlplay).play("two_short:d=4,o=5,b=100:16e6,16e6");
              }

    energy:
      name: 'BL0942 Energy'
      id: bl0942_e
    frequency:
      name: "BL0942 Frequency"
      id: bl0942_f
#    line_frequency:
#      name: "BL0942 line frequecy"
#      id: bl0942_lf
    reset: false
    uart_id: uart_1
    update_interval: 1s

  - platform: internal_temperature
    update_interval: 60s
    name: "chip Temperature"
    id: intemp
    on_value_range:
      - above: 55.0
        then:
          - switch.turn_off: relay_sw

