esphome:
  name: wf183de_sensor
  platform: ESP32
  board: esp32-c3-devkitm-1

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: false

# Define the WF183DESensor class as a custom component
globals:
  - id: wf183de_sensor
    type: WF183DESensor*
    restore_value: no
    initial_value: 'new WF183DESensor()'

custom_component:
  - lambda: |-
      App.register_component(id(wf183de_sensor));

sensor:
  - platform: custom
    lambda: |-
      return {id(wf183de_sensor)->get_temperature_sensor(), id(wf183de_sensor)->get_pressure_sensor()};
    sensors:
      - name: "WF183DE Temperature"
        unit_of_measurement: "Â°C"
        accuracy_decimals: 1
      - name: "WF183DE Pressure"
        unit_of_measurement: "kPa"
        accuracy_decimals: 1

cpp_component:
  components:
    - id: wf183de_sensor
      definition: |-
        class WF183DESensor : public PollingComponent {
        public:
          Sensor *temperature_sensor = new Sensor();
          Sensor *pressure_sensor = new Sensor();

          WF183DESensor() : PollingComponent(5000) {}

          Sensor *get_temperature_sensor() { return temperature_sensor; }
          Sensor *get_pressure_sensor() { return pressure_sensor; }

          void setup() override {
            // Any setup code, if needed
          }

          void update() override {
            // Trigger temperature reading
            Wire.beginTransmission(0xDA); // I2C write address
            Wire.write(0x0A);  // Command register
            Wire.write(0x04);  // Temperature command
            Wire.endTransmission();
            delay(10);

            // Read temperature
            Wire.beginTransmission(0xDA);
            Wire.write(0x0F);  // Temperature high byte register
            Wire.endTransmission();
            Wire.requestFrom(0xDB, 2);
            int16_t temp_raw = (Wire.read() << 8) | Wire.read();
            float temperature = temp_raw / 10.0;
            temperature_sensor->publish_state(temperature);

            // Trigger pressure reading
            Wire.beginTransmission(0xDA);
            Wire.write(0x0A);
            Wire.write(0x06);
            Wire.endTransmission();
            delay(10);

            // Read pressure
            Wire.beginTransmission(0xDA);
            Wire.write(0x0B);
            Wire.endTransmission();
            Wire.requestFrom(0xDB, 4);
            uint32_t pressure_raw = (Wire.read() << 24) | (Wire.read() << 16) | (Wire.read() << 8) | Wire.read();
            float pressure = pressure_raw / 1000.0;
            pressure_sensor->publish_state(pressure);
          }
        };
