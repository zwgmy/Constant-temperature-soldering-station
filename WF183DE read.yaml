esphome:
  name: wf183de_sensor
  platform: ESP32
  board: esp-wrover-kit

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: false

sensor:
  - platform: custom
    lambda: |-
      auto wf183de_sensor = new WF183DESensor();
      App.register_component(wf183de_sensor);
      return {wf183de_sensor->temperature_sensor, wf183de_sensor->pressure_sensor};
    sensors:
      - name: "WF183DE Temperature"
        unit_of_measurement: "°C"
        accuracy_decimals: 1
      - name: "WF183DE Pressure"
        unit_of_measurement: "kPa"
        accuracy_decimals: 1

# 自定义代码以读取温度和压力
custom_component:
  - lambda: |-
      class WF183DESensor : public PollingComponent, public Sensor {
      public:
        Sensor *temperature_sensor = new Sensor();
        Sensor *pressure_sensor = new Sensor();

        WF183DESensor() : PollingComponent(5000) {} // 每5秒刷新一次

        void setup() override {
          // 设置初始化代码，如果需要
        }

        void update() override {
          // 读取温度
          Wire.beginTransmission(0xDA);
          Wire.write(0x0A);  // 命令寄存器地址
          Wire.write(0x04);  // 触发温度读取命令
          Wire.endTransmission();

          // 等待数据准备完成
          delay(10);
          
          // 读取温度数据
          Wire.beginTransmission(0xDA);
          Wire.write(0x0F);  // 温度高位
          Wire.endTransmission();
          Wire.requestFrom(0xDB, 2); // 读取2字节温度数据
          int16_t temp_raw = (Wire.read() << 8) | Wire.read();
          float temperature = temp_raw / 10.0;  // 温度数据转换
          temperature_sensor->publish_state(temperature);

          // 读取压力
          Wire.beginTransmission(0xDA);
          Wire.write(0x0A);  // 命令寄存器地址
          Wire.write(0x06);  // 触发压力读取命令
          Wire.endTransmission();

          // 等待数据准备完成
          delay(10);
          
          // 读取压力数据
          Wire.beginTransmission(0xDA);
          Wire.write(0x0B);  // 压力高位
          Wire.endTransmission();
          Wire.requestFrom(0xDB, 4); // 读取4字节压力数据
          uint32_t pressure_raw = (Wire.read() << 24) | (Wire.read() << 16) | (Wire.read() << 8) | Wire.read();
          float pressure = pressure_raw / 1000.0;  // 压力数据转换
          pressure_sensor->publish_state(pressure);
        }
      };
      return {new WF183DESensor()};
